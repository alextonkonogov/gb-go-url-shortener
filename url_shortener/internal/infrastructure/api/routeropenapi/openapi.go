// Package routeropenapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package routeropenapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ApiStatistics defines model for ApiStatistics.
type ApiStatistics struct {
	Count  *int    `json:"count,omitempty"`
	Ip     *string `json:"ip,omitempty"`
	Long   *string `json:"long,omitempty"`
	Short  *string `json:"short,omitempty"`
	Viewed *string `json:"viewed,omitempty"`
}

// ApiURL defines model for ApiURL.
type ApiURL struct {
	Admin   *string `json:"admin,omitempty"`
	Created *string `json:"created,omitempty"`
	Id      *int    `json:"id,omitempty"`
	Long    *string `json:"long,omitempty"`
	Short   *string `json:"short,omitempty"`
}

// PostAJSONBody defines parameters for PostA.
type PostAJSONBody = ApiStatistics

// PostCreateJSONBody defines parameters for PostCreate.
type PostCreateJSONBody = ApiURL

// PostAJSONRequestBody defines body for PostA for application/json ContentType.
type PostAJSONRequestBody = PostAJSONBody

// PostCreateJSONRequestBody defines body for PostCreate for application/json ContentType.
type PostCreateJSONRequestBody = PostCreateJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Index page with form
	// (GET /)
	Get(w http.ResponseWriter, r *http.Request)
	// Shows URL statistics
	// (POST /a)
	PostA(w http.ResponseWriter, r *http.Request)
	// Admin page
	// (GET /a/{admin})
	GetAAdmin(w http.ResponseWriter, r *http.Request, admin string)
	// Create URL
	// (POST /create)
	PostCreate(w http.ResponseWriter, r *http.Request)
	// Redirect to long original URL
	// (GET /s/{short})
	GetSShort(w http.ResponseWriter, r *http.Request, short string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// Get operation middleware
func (siw *ServerInterfaceWrapper) Get(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Get(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostA operation middleware
func (siw *ServerInterfaceWrapper) PostA(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostA(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetAAdmin operation middleware
func (siw *ServerInterfaceWrapper) GetAAdmin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "admin" -------------
	var admin string

	err = runtime.BindStyledParameter("simple", false, "admin", chi.URLParam(r, "admin"), &admin)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "admin", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAAdmin(w, r, admin)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostCreate operation middleware
func (siw *ServerInterfaceWrapper) PostCreate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCreate(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetSShort operation middleware
func (siw *ServerInterfaceWrapper) GetSShort(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "short" -------------
	var short string

	err = runtime.BindStyledParameter("simple", false, "short", chi.URLParam(r, "short"), &short)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "short", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSShort(w, r, short)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/", wrapper.Get)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/a", wrapper.PostA)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/a/{admin}", wrapper.GetAAdmin)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/create", wrapper.PostCreate)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/s/{short}", wrapper.GetSShort)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RVUW/TMBD+K9bBY1gChZe8FYTGtKFN7faAYA9ecmuNEtucL9uqKv8dnROpbZaCxlQE",
	"L5XtL3c+f9991zUUrvbOouUA+RpCscRax+XUmzlrNoFNEQ88OY/EBuOucI1lWfDKI+RgLOMCCdoEjN86",
	"D0zGLuS4cnYxCoSlIx5F7gzeYzkCtW0iBV7Nzh5Xpsva2NF0BaHm0XwJmHL8MU+uuo3FGXvrBCwxFGQ8",
	"G2chh9nH+aWaXpxAAmy4krC5qX2FKiDdmQJ78A4pdBGvj7KjTK5zHq32BnKYxKMEvOZlfHAqPwvkx/ed",
	"2BIflNcLVPeGl+rWUQ0xF2n55KSEHI6RIQHC4J0NHYVvsqzT2DL2KuMDp0uuK8htU1VtMrjp/BQSwAct",
	"jwmDAPjWZNmkkE1cYbe/ceWq239xDalPl5/PlER1aLqB+4NNPAjD77oad8sQ4cjqKvKJpJDIUfw8NHWt",
	"abWPFPkk1bGZXBhhcr5090Fdzc5U2JhiyOSFCzyNXP5oMPB7V64GNGrvK1PEiPR7cHbjOVm9JLyFHF6k",
	"G1OmvSPTXTvGHtutUNIpIa0vwJB0OlOD7W/VPWBZ56fSvW/HxLrRpeqpgucIOqpNJ2i6jtOg3euQqcCx",
	"GcZ8MY1w9BrpGhkpQP51mCNOAlW4UnLI6InWhASsrsXiuk+yq0qyxfBwhFz/h348qMRbMkVhu0m+364f",
	"Ii49MWrSDj6cU+Xef8mie+r5C97cEiIKF9J1tMt+R86wNIQFK3ZK/nyVI7Mwcs2YmsfI83n8J36mSUOf",
	"5M9NOskmTzapeqWof+/Bpfg1sbE9uuiOvoZkVKTQXrc/AwAA//9AX5/jJgoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
